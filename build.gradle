import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'idea'
    id "com.modrinth.minotaur" version "2.+" //Modrinth
    id 'net.darkhax.curseforgegradle' version '1.1.26' //Curseforge
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()

    maven { // JEI
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { // Curseforge
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // REI
        url "https://maven.shedaniel.me/"
    }
    maven { // EMI
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { // Curios
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    //JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    //runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    //REI
    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${rei_version}"
    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
    //EMI
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    //runtimeOnly "dev.emi:emi-neoforge:${emi_version}"
    //MagmaCore
    implementation "curse.maven:MagmaCore-1267885:${magma_core_version}"
    //JADE
    runtimeOnly "curse.maven:jade-324717:${jade_version}"
    //BlockDetective
    runtimeOnly "curse.maven:blockdetective-662628:${blockdetective_version}"
    //Curios
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            magmacore_version_range: magmacore_version_range,
            loader_version_range   : loader_version_range,
            pack_format_number     : pack_format_number,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

//Naming of the built mod jar file
tasks.named('jar').configure {
    archiveBaseName.set(mod_name.replace(" " , ""))
    archiveVersion.set("${minecraft_version}-(v.${mod_version}-NEO)")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

//MODRINTH
def rawGameVersions = project.findProperty("game_versions")?.toString() ?: "" //Game version transformator for Modrinth
def parsedGameVersions = rawGameVersions.split(",").collect { it.trim() }
def modrinthToken = project.findProperty("modrinthToken")?.toString() //token getter
if (modrinthToken == null) {
    throw new GradleException("Missing token in ~/.gradle/gradle.properties => 'modrinthToken'")
}
modrinth {
    token = modrinthToken
    projectId = mr_id
    versionType = release_type //can be `release`, `beta` or `alpha`
    uploadFile = jar
    gameVersions = parsedGameVersions
    changelog = change_log
    failSilently = true
    syncBodyFrom = rootProject.file("README.md").text
    dependencies {
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "magma-core"
    }
}
//tasks.modrinth.dependsOn(tasks.modrinthSyncBody) //auto readme sync
tasks.modrinth.wasUploadSuccessful()
tasks.modrinth.uploadInfo


//CURSEFORGE
def cfToken = project.findProperty("curseforgeToken")?.toString()
if (cfToken == null) {
    throw new GradleException("Missing token in ~/.gradle/gradle.properties => 'curseforgeToken'")
}
def cfId = project.findProperty("cf_id")?.toString()

task publishCurseForge(type: TaskPublishCurseForge) {
    apiToken = cfToken

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    def mainFile = upload(cfId as Integer, jar)
    mainFile.releaseType   = release_type
    mainFile.changelog     = change_log
    mainFile.changelogType = 'markdown'
}
